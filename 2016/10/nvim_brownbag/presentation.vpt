!!!!! To view this file as a Vimpoint presentation, make sure the
!!!!! various plugins and syntax files are installed and then type:
!!!!!
!!!!!      :Run
!!!!!
!!!!! while editing this file in Vim

=title     What is Neovim?

=presenter  TJ DeVries
=info       DW Brown Bag

=duration   50 minutes

!!!!! Just use autopause all the time :)
=autopause


!!!!! Floobits
!!!!! Cool vim operator combos
!!!!! Built-in terminal (neovim)

=section [#] Introduction


A Presentation about Vim...

...In Vim!

* Thanks to {{trapd00r/vimpoint}}, which I forked and have made 
  a few small changes.
* This will probably lead to a few goofy things happening
    * Lots of plugins / Not my regular work environment, etc.
* Anyway, feel free to ask questions.
    * I'm hoping to have some extra time so we can explore together
      and do a live demo (I apparently want this to go poorly).
    * We should have time, assuming I don't get sidetracked on any
      one topic for too long.
    * But stop me at any time to go over something again or have me
      try something different.

Why Vim?

* What can Vim do very well that other editors struggle with?

    * Edit text quickly

    * Navigate quickly

    * Extensible

    * Fun!

Why NeoVim?

* Please keep in mind, some of this will be my opinion.
* If you have other opinions or have had different experiences,
  please chime in!

=break

* More modern open source philosophy
    * Multiple maintainers
    * Github collaboration with maintainers
    * Lots of feedback
    * Nice community
    * Easy to get involved! (I've had 3 PR's accepted!)

=break

* Less repeated work
    * Clipboard support
    * Remote plugin architecture
    * Using libraries (libterm, xclip)
* Less *NIH* (Not Implemented Here) mentality

=break

* True client-server architecture
    * Allows for embedding anywhere (opposite EMACS approach)
    * Custom GUIs
        * nvim-qt
        * nyaovim
        * and more!


=section [#] Modern Vim

Using Vim's Built-in Awesomeness

* A few of these I'll show now, and a few I will
  show in conjunction with some plugins

=break

* Count Operator Object

* Macros / Repeat

* Search / Replace / Regex

=break

* Speaking Vim's Language: Count, Operator Object

=example

    # Move one word
    one word two word

    # Delete two words
    one two three

=break

* Speaking Vim's Language: Count, Operator Object

=example

    // ci(
    // 2ct,
    // %
    int main(not, really, good) {
       int a;
       char b;

       // ^a     just for fun
       a = 5 + 7;
       if (a == 12) {
           // ci"
           printf("Wow!");
       }

       // thanks to tpope, vim-abolish
       // cru, crs, crc, crm
       this_is_snake
    }

=break

* Combine these with macros, and you have yourself a
  very powerful tool

=example

    # create dictionary, my_values
    # qai'<esc>Ea':<esc>ldwi '<esc>A<BS>',<esc>j^
    one_key one_value;
    this_key that_value;
    a   3;
    close                               far away;
    anotherthing                that last one;

=break

* Just to note, Vim can do other crazy stuff,
    like way nicer than multiple cursors crazy

    //
    my_list[i] = this
    ....
    my_list[i + x] = that

=break

* Just to note, Vim can do other crazy stuff,
    like way nicer than multiple cursors crazy

    //
    my_obj.attr[i] = this
    ....
    my_obj.attr[i + x] = that

=break

* Just to note, Vim can do other crazy stuff,
    like way nicer than multiple cursors crazy...

=example

    // ^V2jt[cmy_ojb.attr
    my_obj.attr[i] = this
    my_obj.attr[i + 1] = this_or_that
    my_obj.attr[i + x] = that

    // Can also move and past

=break

* I think most of the time though, this can just be covered
  by a search and replace

=example
    // just search and replace
    // Change to a class
    // :s/my_list/my_obj.attr/g
    // Oh, changed my class name
    // V2j:s/my_\w*/that/g
    my_list[i] = this
    my_list[i + 1] = this_or_that
    my_list[i + x] = that

=section [#] Plugin Outline

How to make Vim have "modern" features

* Plugin Management: **Vim-plug**
* Completion: **Deoplete + Sources**
* Snippets: **Ultisnips**
* Tags: **Gutentags**
* Shorcuts: **Unite**

=section [#] Plugin Management

Plugin Management

* With Vim-plug, it's easy:

    " In your vimrc
    call plug#begin()

    " Install a plugin
    Plug 'shougo/deoplete.nvim'
    " Lazy load plugin only in Python files
    Plug 'davidhalter/jedi-vim', { 'for': 'python' }

    " Install a plugin and then `do` something
    Plug 'powerline/fonts', { 'do': './install.sh' } \
        | Plug 'bling/vim-airline'

    call plug#end()

=break

* Here's what I used for this presentation

=example ./init.vim


=section [#] Completion

Completion

* First learn about some built-in features of Vim

   :help ins-completion 

=example demos/completion.py

=break

* With deoplete, it's even easier:

=example demos/completion.py

=section [#] Snippets

Snippets

* Templates for code writing

* Couple options:

    * Neosnippets

    * Ultisnips

    * Custom solution?

* I use Ultisnips, but some others do offer either a simpler interface
  or some easier ways of templating

=break

* Community snippets (honza/vim-snippets)

* Make your own!

* Here are some examples of mine:

    * In python:

=example ./demos/py_snippets.py

    * In C:

=example ./demos/c_snippets.c

=section [#] Tags and navigation

Tags and Navigation

* "GUIs make it so I can go to the definition of stuff!
  Vim could never do that"

* WRONG! :)

=break

* Introducing ctags, which can be found on pretty much every machine

* You can run ctags manually, usually with some command like

    $ ctags -R .

* And now you have your tags generated

=break

* However, I use {{ludovicchabant/vim-gutentags}}.

* It manages tags files and keeps them up to date, and in general,
    in your project scope, with is very nice.

    * Do note that this will pretty much put tags files everywhere.

    * You should put tags in your global gitignore!

* Here's an example.

=example ./demos/tags_follower.py

=section [#] Shortcuts / Navigation / Everything Unite!

Unite.nvim

* First off, there's a new version coming out called {{denite.nvim}}

* It will be faster and better, but it doesn't have all the features
  I'm going to be showing you today, and it's a bit experimental...
  And I'm already worried about things breaking down.

* Anyways...

=break

* What can you do with Unite?...

* Anything!

    * Fuzzy finding

    * Tab/Buffer/Window/Line navigation

    * Play radio stations

    * Shortcuts

=break

* I only recently discovered this, so I haven't completely
  unlocked the power of Unite.

* However, I use it for a few main things

=break

* File navigation

    nnoremap <silent> <leader>if :<C-u>Unite -start-insert buffer<CR>
    nnoremap <silent> <leader>it :<C-u>Unite -start-insert tab:no-current<CR>

* Current file navigation

    nnoremap <silent> <leader>il :<C-u>Unite -start-insert line<CR>

* Command helper

    nnoremap ,pc :Unite menu:quick_functions -start-insert<CR>

=break

=section [#] Bonuses!

* Floobits:

    * FlooJoinWorkspace https://floobits.com/tjdevries/Floobits_Experimentation
    * Please remind me to do that after the presentation, because I'm
      a little worried I will lose my place and we're so close to finishing!

=section [#] Stuff we couldn't get to

Stuff we didn't have time for

* Haven't talked about:
    * github.com/neomake/neomake: Asynchronous linting, but not that
      exciting to watch in a presentation.
    * github.com/vim-airline/vim-airline: A really pretty and
      easy to configure statusline

=section The End

The End

* You can find these slides at github.com/tjdevries/talks
* You can find my configuration at github.com/tjdevries/config_manager
    * check the nvim/ folder
* You can find the help at `:help <my topic>` or `:helpgrep <magic>`
    * Also feel free to message me or ask me.

I LOVE VIM

* I love (neo)vim
